

(require racket/include)
(require 2htdp/universe)
(require 2htdp/image)
;(require graphics/graphics)
;(require racket/vector)
(require racket/format)
;(require racket/gui)
;(require lang/posn)
;(include "project.ss")
(include "project.rkt")




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(define move-sound "movepiece.wav")

(define (cord-to-pos a b)
  (make-posn (quotient (- a 57) 57) (quotient (- 510 b) 57)))

(define background (place-image board 378.5 283 (empty-scene 757 566)))

(define (sec-to-min sec)
  (let* ([seco (modulo sec 60)]
         [min (modulo (quotient sec 60) 60)]
         [hour (quotient sec 3600)])
    (~a hour ":" min ":" seco)))
(define move-frame (new frame%
                        [label "Moves"]
                        [width 200]
                        [height 500]))
;(send move-frame show #t)
(define move-text
  (new text-field% 
       [parent move-frame]
       [label ""]
       [stretchable-width #t]	 
       [stretchable-height #t]
       [enabled #f]
       [style (list 'multiple)]))

(define (move-alpha pos)
  (let ((x (posn-x pos))
        (y (posn-y pos))
        (alpha 'a))
    (cond [(= x 0) (begin (set! alpha 'a) (~a alpha (+ y 1)))]
          [(= x 1) (begin (set! alpha 'b) (~a alpha (+ y 1)))]
          [(= x 2) (begin (set! alpha 'c) (~a alpha (+ y 1)))]
          [(= x 3) (begin (set! alpha 'd) (~a alpha (+ y 1)))]
          [(= x 4) (begin (set! alpha 'e) (~a alpha (+ y 1)))]
          [(= x 5) (begin (set! alpha 'f) (~a alpha (+ y 1)))]
          [(= x 6) (begin (set! alpha 'g) (~a alpha (+ y 1)))]
          [(= x 7) (begin (set! alpha 'h) (~a alpha (+ y 1)))])))

(define (coin-symbol coin)
  (let ((name (get-field name coin)))
    (cond [(string=? name "pawn") ""]
          [(string=? name "rook") "R"]
          [(string=? name "bishop") "B"]
          [(string=? name "knight") "N"]
          [(string=? name "king") "K"]
          [(string=? name "queen") "Q"])))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;(define a 0)
(define call #f)
(define peace #f)
(define moves '())
(define current 1)
(define timer #t)
(define p1-time "Standard")
(define p2-time "Standard")
(define p1-name "")
(define p2-name "")
(define checkcheck #f)
(define checkmatethis #f)
(define cordie '())
(define counter 1)
(define (move-write pos1 pos2)
  (let ((old (get pos1 board-conf))
        (new (get pos2 board-conf)))
    (if (number? new) (string-append (coin-symbol old) (move-alpha pos1) "-" (move-alpha pos2))
                             (string-append (coin-symbol old) (move-alpha pos1) "x" (move-alpha pos2)))))

(define (update-move-text str clr)
  (if (string=? clr "white")
      (send move-text set-value (string-append (send move-text get-value) "\n " str))
      (send move-text set-value (string-append (send move-text get-value) " - " str))))


(define (return w x y z)
  (if (equal? z "button-down") 
      (if (and (> x 57) (< x 510) (> y 57) (< y 510))
          (if (eq? call #f) (let* ([pos (cord-to-pos x y)]
                                   [piec (get pos board-conf)])
                              (if (number? piec) w
                                  (cond [(and (= current 1) (string=? (get-field color piec) "white"))
                                         (begin (set! peace piec) (set! moves (get-field valid-moves piec)) (set! cordie pos) (set! call #t) (append w moves))]
                                        [(and (= current 2) (string=? (get-field color piec) "black"))
                                         (begin (set! peace piec) (set! moves (get-field valid-moves piec)) (set! cordie pos) (set! call #t) (append w moves))]
                                        [else w])))
              (let* ([pos (cord-to-pos x y)]
                     [checking (get pos board-conf)])
                (cond [(or (number? checking) (not (string=? (get-field color checking) (get-field color peace))))
                       (if (member pos moves)
                           (begin (update-move-text (move-write cordie pos) (if (= current 1) "white" "black")) 
                                  (play-sound move-sound #t) (send peace move pos) (set! call #f) 
                                  (set! current (- 3 current)) 
                                  (set! checkcheck #t) (list (vector-append alive-w alive-b))) w)]
                      [else (begin (set! call #f) (return (list (vector-append alive-w alive-b)) x y z))]))) w)
      (if (and checkcheck (equal? z "move")) (begin (if (= current 1) (update-valid-moves-check-w) (update-valid-moves-check-b))
                                                    (set! checkcheck #f) 
                                                    (set! checkmatethis (check-mate-condition (if (= current 1) "white" "black") )) 
                                                    (if checkmatethis (begin (send move-text set-value (string-append (send move-text get-value)"#"))
                                                                             (play-sound "checkmat.wav" #t))
                                                        (if (check-condition) (begin (send move-text set-value (string-append (send move-text get-value)"+"))
                                                                                     (play-sound "check.wav" #t) (void)))) w) w)))

(define (draw w)
  (define (helper vec count length)
    (if (= count length) background
        (send (vector-ref vec count) show (helper vec (+ count 1) length))))
  (define (h2 lis back)
    (if (null? lis) back
        (let ((pos (pos-to-cord (car lis))))
          (place-image hl (car pos) (cdr pos) (h2 (cdr lis) back)))))
  (h2 (cdr w) (helper (car w) 0 (vector-length (car w)))))

(define (stoping w)
  (cond [checkmatethis #t]
        [timer (if (or (= p1-time 0) (= p2-time 0)) #t #f)]
        [else #f]))

(define (foo w)
  (cond [(eq? checkmatethis "stale-mate") (place-image sm 280 280 (drawn w))]
        [(and checkmatethis (string=? (check-condition) "check to white")) (place-image bw 280 280 (drawn w))]
        [(and checkmatethis (string=? (check-condition) "check to black")) (place-image ww 280 280 (drawn w))]
        [timer (begin (play-sound "checkmat.wav" #t) (if (= 0 p1-time) (place-image bw 280 280 (drawn w))
                                                         (place-image ww 280 280 (drawn w))))]))


(define (pri str color)
  (if (eq? color 'w) (text str 20 "white") (text str 20 "blue")))

(define (p1) (if (number? p1-time) (sec-to-min p1-time) p1-time))
(define (p2) (if (number? p2-time) (sec-to-min p2-time) p2-time))

(define (drawn w)
  (place-image (pri p2-name 'b) 650 135 (place-image (pri p1-name 'w)
                                                     650 55 (place-image (pri (p1) 'w) 650 80
                                                                         (place-image (pri (p2) 'b) 650 160
                                                                                      (draw w))))))


(define (tick1 w) 
  (if (not timer) w (begin (if (= current 1) (set! p1-time (- p1-time 1)) (set! p2-time (- p2-time 1))) w)))

(define (players)
  (big-bang (list (vector-append alive-w alive-b))
            (to-draw drawn)
            (on-tick tick1 1)
            (on-mouse return)
            (stop-when stoping foo)
            (name (string-append p1-name " vs " p2-name))))

(define (start2player p1name p2name time)
  (begin (set! p1-name p1name) (set! p2-name p2name)
         (if (number? time) (begin (set! p1-time (* 60 time)) (set! p2-time (* 60 time))) (set! timer #f))
         (players)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define color "white")
(define msg 1)
(define moven #f)
(define moven1 #t)
(define send-bundle '())
(define calln #f)
(define timern "")
(define mytime 0)
(define opptime 0)
(define my #f)
(define checkmaten #f)
(define dropped #f)
(define checkn #f)
(define check2 #f)


(define (draw1 w)
  (define (help lis back)
    (if (null? lis) back
        (let ((pos (pos-to-cord (car lis))))
          (place-image update (car pos) (cdr pos) (help (cdr lis) back)))))
  (help (car w) (draw (cdr w))))

(define (m) (if (number? timern) (sec-to-min mytime) timern))
(define (opp) (if (number? timern) (sec-to-min opptime) timern))

(define (draw1n w)
  (place-image (pri "Opponent" (if (string=? color "white") 'b 'w)) 630 140
               (place-image (pri "You" (if (string=? color "white") 'w 'b)) 650 60
                            (place-image (pri (m) (if (string=? color "white") 'w 'b)) 650 80
                                         (place-image (pri (opp) (if (string=? color "white") 'b 'w)) 650 160
                                                      (draw1 w))))))

(define (tickn w)
  (if (number? timern) (if (and (= msg 2) (equal? color "white")) w 
                           (begin (if my (set! mytime (- mytime 1)) (set! opptime (- opptime 1))) w)) w))

(define (resultnet w)
  (cond  [(eq? checkmaten "stale-mate") (begin (play-sound "checkmat.wav" #t) (place-image sm 280 280 (draw1n w)))]
         [check2 (begin (play-sound "checkmat.wav" #t) (place-image oppw 280 280 (draw1n w)))]
         [dropped (begin (play-sound "checkmat.wav" #t) (place-image you 280 280 (draw1n w)))]
         [(and (number? timern) (not checkmaten)) (begin (play-sound "checkmat.wav" #t) (if (= 0 mytime) (place-image oppw 280 280 (draw1n w))
                                                                                            (place-image you 280 280 (draw1n w))))]
         [(string=? (check-condition) "check to white") (if (string=? color "white") (place-image oppw 280 280 (draw1n w)) (place-image you 280 280 (draw1n w)))]
         [(string=? (check-condition) "check to black") (if (string=? color "white") (place-image you 280 280 (draw1n w)) (place-image oppw 280 280 (draw1n w)))]))

(define (stopn w)
  (cond [dropped #t]
        [(string? checkmaten) #t]
        [check2 #t]
        [(number? timern) (if (or (= mytime 0) (= opptime 0)) #t #f)]
        [else #f]))


(define (network ip p-name)
  (big-bang (list '() #())
            (to-draw draw1n)
            (on-tick tickn 1)
            (on-mouse click)
            (stop-when stopn resultnet)
            (name p-name)
            (state #f)
            (register ip)
            (on-receive getval)))

(define (getval w m)
  (cond [(eq? m 'mate) (begin (set! dropped #t) w)]
        [(= msg 1)
         (begin (set! color (car m))
                (set! msg 2)
                (set! timern (cadr m)) (set! mytime timern) (set! opptime timern)
                (if (string=? color "black") (list '() (vector-append alive-w alive-b)) w))]
        [(and (= msg 2) (string=? color "black"))
         (let ([posi (apply make-posn (car m))]
               [posf (apply make-posn (cadr m))]
               [time (caddr m)])
           (begin (update-move-text (move-write posi posf) color) (send (get posi board-conf) move posf)   
                  (if (string=? color "white") (update-valid-moves-check-w) (update-valid-moves-check-b))
                  (set! checkmaten (check-mate-condition color)) (set! check2 (if (string? checkmaten) #f checkmaten)) 
                  (if checkmaten (begin (send move-text set-value (string-append (send move-text get-value)"#"))
                                                                                       (play-sound "checkmat.wav" #t))
                                                                     (if (check-condition) (begin (send move-text set-value (string-append (send move-text get-value) "+"))
                                                                                                  (play-sound "check.wav" #t)) (void)))
                  (set! opptime time)
                  (set! my #t) 
                  (set! msg 3) (set! moven #t) (play-sound move-sound #t) (list (list posi posf) (vector-append alive-w alive-b))))]
        [(= msg 2) (begin (set! moven #t) (set! msg 3) (set! my #t) (list '() (vector-append alive-w alive-b)))]
        [else (let ([posi (apply make-posn (car m))]
                    [posf (apply make-posn (cadr m))]
                    [time (caddr m)])
                (begin (update-move-text (move-write posi posf) (if (string=? color "white") "black" "white")) (send (get posi board-conf) move posf) (set! opptime time)  
                       (if (string=? color "white") (update-valid-moves-check-w) (update-valid-moves-check-b))
                       (set! checkmaten (check-mate-condition color))
                       (set! check2 (if (string? checkmaten) #f checkmaten)) (if checkmaten (play-sound "checkmat.wav" #t)
                                                                          (if (check-condition) (play-sound "check.wav" #t) (void)))
                       (set! my #t)
                       (set! moven #t) (play-sound move-sound #t) (list (list posi posf) (vector-append alive-w alive-b))))]))


(define (click w x y z)
  (if moven (if (and moven1 (equal? z "button-down")) 
                (if (and (> x 57) (< x 510) (> y 57) (< y 510))
                    (if (eq? calln #f) (let* ([pos (cord-to-pos x y)]
                                              [piec (get pos board-conf)])
                                         (if (number? piec) w
                                             (if (string=? color (get-field color piec))
                                                 (begin (set! peace piec) (set! cordie pos) (set! send-bundle (list (list (posn-x pos) (posn-y pos))))
                                                        (set! moves (get-field valid-moves piec)) (set! calln #t) (append w moves)) w)))
                        
                        (let* ([pos (cord-to-pos x y)]
                               [checking (get pos board-conf)])
                          (cond [(or (number? checking) (not (string=? (get-field color checking) color)))
                                 (if (member pos moves)
                                     (begin (update-move-text (move-write cordie pos) color) (play-sound move-sound #t) (send peace move pos) (set! calln #f) 
                                            (set! my #f) (set! checkn #t) (set! moven1 #f)
                                            (make-package (list '() (vector-append alive-w alive-b))
                                                          (append send-bundle (append (list (list (posn-x pos) (posn-y pos)))
                                                                                      (list mytime))))) w)]
                                [else (begin (set! calln #f) (click (list (car w) (cadr w)) x y z))]))) w)
                (if (and checkn (equal? z "move"))
                    (begin (set! checkmaten (check-mate-condition (if (string=? color "white")"black" "white")))
                           (if (check-condition) (begin (send move-text set-value (string-append (send move-text get-value)"+"))
                                                        (play-sound "check.wav" #t)))
                           (if checkmaten (send move-text set-value (string-append (send move-text get-value) "#")) (void))
                           (set! moven #f) (set! moven1 #t) (set! checkn #f) w) w)) w))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define currentc "pl")
(define callc #f)
(define comp-move #f)

(define (stopc w)
  checkmatethis)

(define (final w)
  (cond [(eq? checkmatethis "state-mate") (place-image sm 280 280 (draw1 w))]
        [(and (string=? (check-condition) "check to white")
              (string=? comp-clr "white")) (place-image you 280 280 (draw1 w))]
        [(and (string=? (check-condition) "check to white")
              (string=? comp-clr "black")) (place-image oppw 280 280 (draw1 w))]
        [(and (string=? (check-condition) "check to black")
              (string=? comp-clr "white")) (place-image oppw 280 280 (draw1 w))]
        [(and (string=? (check-condition) "check to black")
              (string=? comp-clr "black")) (place-image you 280 280 (draw1 w))]))


(define (computer nam)
  (big-bang (list '() (vector-append alive-w alive-b))
            (on-draw draw1)
            (on-mouse comp)
            (stop-when stopc final)
            (name (string-append nam " vs Computer"))))

(define (comp w x y z)
  (if (equal? z "button-down") 
      (if (and (> x 57) (< x 510) (> y 57) (< y 510))
          (if (and (not callc) (not comp-move)) (let* ([pos (cord-to-pos x y)]
                                                       [piec (get pos board-conf)])
                                                  (if (number? piec) w
                                                      (if (string=? (get-field color piec) comp-clr) w
                                                          (begin (set! peace piec)(set! cordie pos)
                                                                 (set! moves (get-field valid-moves piec)) (set! callc #t) (append w moves)))))
              (let* ([pos (cord-to-pos x y)]
                     [checking (get pos board-conf)])
                (cond [(or (number? checking) (not (string=? (get-field color checking) (get-field color peace))))
                       (if (member pos moves)
                           (begin (update-move-text (move-write cordie pos) (if (string=? comp-clr "white") "black" "white"))
                                  (play-sound move-sound #t) (send peace move pos) (set! callc #f) (set! comp-move #t)
                                  (list '() (vector-append alive-w alive-b))) w)]
                      [else (begin (set! callc #f) (comp (list (car w) (cadr w)) x y z))]))) w)
      (if (and comp-move (equal? z "move"))
          (if (begin 
                (set! checkmatethis (check-mate-condition comp-clr)) checkmatethis)
              (begin (send move-text set-value (string-append (send move-text get-value)"#")) (play-sound "checkmat.wav" #t) w)
              (if (check-condition) (begin (send move-text set-value (string-append (send move-text get-value)"+"))
                                           (play-sound "check.wav" #t)
                                           (let* ((mov (best-move))
                                                  (posi (car mov))
                                                  (posf (caddr mov)))
                                             (begin  (update-move-text (move-write (cadr mov) posf) comp-clr)
                                                     (send posi move posf) 
                                                     (begin0 (list (list (cadr mov) (caddr mov)) (vector-append alive-w alive-b)) (if (string=? comp-clr "black")
                                                                                                                                      (update-valid-moves-check-w)
                                                                                                                                      (update-valid-moves-check-b))
                                                             (set! checkmatethis (check-mate-condition (if (string=? comp-clr "white") "black" "white")))
                                                             (if checkmatethis (begin (send move-text set-value (string-append (send move-text get-value)"#"))
                                                                                      (play-sound "checkmat.wav" #t))
                                                                 (if (check-condition) (begin (send move-text set-value (string-append (send move-text get-value)"+"))
                                                                                              (play-sound "check.wav" #t)) (void)))
                                                             
                                                             (set! comp-move #f)))))
                  (let* ((mov (best-move))
                         (posi (car mov))
                         (posf (caddr mov)))
                    (begin  
                      (update-move-text (move-write (cadr mov) posf) comp-clr)
                      (send posi move posf) 
                      (begin0 (list (list (cadr mov) (caddr mov)) (vector-append alive-w alive-b)) (if (string=? comp-clr "black")
                                                                                                       (update-valid-moves-check-w)
                                                                                                       (update-valid-moves-check-b))
                              (set! checkmatethis (check-mate-condition (if (string=? comp-clr "white") "black" "white")))
                              (if checkmatethis (begin (send move-text set-value (string-append (send move-text get-value)"#"))
                                                       (play-sound "checkmat.wav" #t))
                                  (if (check-condition) (begin (send move-text set-value (string-append (send move-text get-value)"+"))
                                                               (play-sound "check.wav" #t)) (void)))
                              
                              (set! comp-move #f)))))) w)))





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

